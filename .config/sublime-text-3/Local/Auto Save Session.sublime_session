{
	"folder_history":
	[
	],
	"last_version": 3126,
	"last_window_id": 4,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 392.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"remo",
						"remove-project"
					]
				]
			},
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 192.0,
				"last_filter": "hex",
				"selected_items":
				[
					[
						"hex",
						"HexViewer: Toggle Hex View"
					],
					[
						"install",
						"Package Control: Install Package"
					]
				],
				"width": 485.0
			},
			"console":
			{
				"height": 126.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/root/.zshrc",
				"/root/.config/openbox/rc.xml",
				"/root/.zsh/aliasesUNIX",
				"/etc/lightdm/users.conf",
				"/etc/lightdm/Xsession",
				"/etc/lightdm/lightdm-mini-greeter.conf",
				"/etc/lightdm/lightdm.conf",
				"/etc/xdg/openbox/autostart",
				"/etc/X11/xinit/xinitrc",
				"/etc/default/passwd",
				"/usr/share/xsessions/openbox.desktop",
				"/root/.config/albert.conf",
				"/root/.config/albert.conf.jd5829",
				"/usr/share/xsessions/openbox-kde.desktop",
				"/usr/share/xsessions/i3.desktop",
				"/root/dotfiles/.config/openbox/autostart",
				"/root/.config/openbox/autostart",
				"/root/dotfiles/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
				"/root/dotfiles/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/root/17499-009b8000-01536000.dump",
				"/root/17499-00659000-0065a000.dump",
				"/root/.config/lxsession/LXDE/desktop.conf",
				"/root/.bashrc",
				"/root/.profile",
				"/root/.termc",
				"/root/android/system/.repo/local_manifests/roomservice.xml",
				"/root/Desktop/tesata",
				"/root/.onedrive/ignore_v2.ini",
				"/root/.config/yabar/yabar.conf",
				"/root/dotfiles/install",
				"/root/dotfiles/i.sh",
				"/root/.config/ob-autostart/config",
				"/root/.config/termite.conf",
				"/root/.zsh-update",
				"/root/fixlinks.sh",
				"/root/.wxcam",
				"/root/.Xdefaults",
				"/etc/grub.d/README",
				"/etc/default/grub",
				"/etc/grub.d/31_hold_shift",
				"/home/hey/.cache/pacaur/thunar-git/src/thunar-git/thunar/thunar-window.c",
				"/home/hey/.cache/pacaur/ncurses5-compat-libs/PKGBUILD",
				"/root/android/system/.repo/manifest.xml",
				"/root/.Xauthority",
				"/root/.config/openbox/environment",
				"/root/.config/termite/config",
				"/root/dotfiles/i",
				"/root/.install",
				"/root/..zshrc",
				"/esp/grub/grub.cfg",
				"/root/Desktop/steam.desktop",
				"/etc/ld.so.conf",
				"/home/hey/.cache/pacaur/android-sdk/PKGBUILD"
			],
			"find":
			{
				"height": 34.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"overw",
					"overwr",
					"extglob",
					"echo",
					"root",
					"pre",
					"prebuilts",
					"platform/",
					"darwin",
					"darrwin",
					"linux"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"printf",
					"platform/pre",
					"",
					"darwin",
					"darrwin"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 23.0
			},
			"input":
			{
				"height": 0.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"output.hex_viewer_inspector":
			{
				"height": 100.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 42.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": false,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 771.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"remo",
						"remove-project"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/usr/share/applications/termite.desktop",
					"settings":
					{
						"buffer_size": 171,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/root/.config/sxhkd/sxhkdrc",
					"settings":
					{
						"buffer_size": 57,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/root/.Xdefaults",
					"settings":
					{
						"buffer_size": 1331,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/root/.themes/TissueBox-Wolf/openbox-3/themerc",
					"settings":
					{
						"buffer_size": 2005,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/root/.vnc/xstartup.turbovnc",
					"settings":
					{
						"buffer_size": 4429,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/root/.config/yabar/yabar.conf",
					"settings":
					{
						"buffer_size": 2632,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/root/.config/openbox/autostart",
					"settings":
					{
						"buffer_size": 659,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/root/.xsession-errors",
					"settings":
					{
						"buffer_size": 35314,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/etc/grub.d/README",
					"settings":
					{
						"buffer_size": 483,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/etc/default/grub",
					"settings":
					{
						"buffer_size": 1690,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "#! /bin/sh\nset -e\n\nprefix=\"/usr\"\nexec_prefix=\"${prefix}\"\ndatarootdir=\"${prefix}/share\"\n\nexport TEXTDOMAIN=grub\nexport TEXTDOMAINDIR=\"${datarootdir}/locale\"\nsource \"${datarootdir}/grub/grub-mkconfig_lib\"\n\nfound_other_os=\n\nmake_timeout () {\n\n  if [ \"x${GRUB_FORCE_HIDDEN_MENU}\" = \"xtrue\" ] ; then \n    if [ \"x${1}\" != \"x\" ] ; then\n      if [ \"x${GRUB_HIDDEN_TIMEOUT_QUIET}\" = \"xtrue\" ] ; then\n    verbose=\n      else\n    verbose=\" --verbose\"\n      fi\n\n      if [ \"x${1}\" = \"x0\" ] ; then\n    cat <<EOF\nif [ \"x\\${timeout}\" != \"x-1\" ]; then\n  if keystatus; then\n    if keystatus --shift; then\n      set timeout=-1\n    else\n      set timeout=0\n    fi\n  else\n    if sleep$verbose --interruptible 3 ; then\n      set timeout=0\n    fi\n  fi\nfi\nEOF\n      else\n    cat << EOF\nif [ \"x\\${timeout}\" != \"x-1\" ]; then\n  if sleep$verbose --interruptible ${GRUB_HIDDEN_TIMEOUT} ; then\n    set timeout=0\n  fi\nfi\nEOF\n      fi\n    fi\n  fi\n}\n\nadjust_timeout () {\n  if [ \"x$GRUB_BUTTON_CMOS_ADDRESS\" != \"x\" ]; then\n    cat <<EOF\nif cmostest $GRUB_BUTTON_CMOS_ADDRESS ; then\nEOF\n    make_timeout \"${GRUB_HIDDEN_TIMEOUT_BUTTON}\" \"${GRUB_TIMEOUT_BUTTON}\"\n    echo else\n    make_timeout \"${GRUB_HIDDEN_TIMEOUT}\" \"${GRUB_TIMEOUT}\"\n    echo fi\n  else\n    make_timeout \"${GRUB_HIDDEN_TIMEOUT}\" \"${GRUB_TIMEOUT}\"\n  fi\n}\n\n  adjust_timeout\n\n    cat <<EOF\nif [ \"x\\${timeout}\" != \"x-1\" ]; then\n  if keystatus; then\n    if keystatus --shift; then\n      set timeout=-1\n    else\n      set timeout=0\n    fi\n  else\n    if sleep$verbose --interruptible 3 ; then\n      set timeout=0\n    fi\n  fi\nfi\nEOF",
					"file": "/etc/grub.d/31_holdshift",
					"file_size": 1557,
					"file_write_time": 131336083824225649,
					"settings":
					{
						"buffer_size": 1557,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/boot/grub/themes/arch-silence/theme.txt",
					"settings":
					{
						"buffer_size": 1037,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/etc/grub.d/31_hold_shift",
					"settings":
					{
						"buffer_size": 1317,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/boot/grub/grub.cfg",
					"settings":
					{
						"buffer_size": 13321,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/etc/grub.d/20_windows",
					"settings":
					{
						"buffer_size": 576,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "#!/bin/sh\nexec tail -n +3 $0\n# This file provides an easy way to add custom menu entries.  Simply type the\n# menu entries you want to add after this comment.  Be careful not to change\n# the 'exec tail' line above.\n",
					"file": "/etc/grub.d/40_custom",
					"file_size": 214,
					"file_write_time": 131306247980000000,
					"settings":
					{
						"buffer_size": 214,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "#!/bin/sh\ncat <<EOF\nif [ -f  \\${config_directory}/custom.cfg ]; then\n  source \\${config_directory}/custom.cfg\nelif [ -z \"\\${config_directory}\" -a -f  \\$prefix/custom.cfg ]; then\n  source \\$prefix/custom.cfg;\nfi\nEOF\n\n",
					"file": "/etc/grub.d/41_custom",
					"file_size": 216,
					"file_write_time": 131306247980000000,
					"settings":
					{
						"buffer_size": 216,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "#! /bin/sh\nset -e\n\n# grub-mkconfig helper script.\n# Copyright (C) 2006,2007,2008,2009,2010  Free Software Foundation, Inc.\n#\n# GRUB is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# GRUB is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.\n\nprefix=\"/usr\"\nexec_prefix=\"/usr\"\ndatarootdir=\"/usr/share\"\ngrub_lang=`echo $LANG | cut -d . -f 1`\n\nexport TEXTDOMAIN=grub\nexport TEXTDOMAINDIR=\"${datarootdir}/locale\"\n\n. \"$pkgdatadir/grub-mkconfig_lib\"\n\n# Do this as early as possible, since other commands might depend on it.\n# (e.g. the `loadfont' command might need lvm or raid modules)\nfor i in ${GRUB_PRELOAD_MODULES} ; do\n  echo \"insmod $i\"\ndone\n\nif [ \"x${GRUB_DEFAULT}\" = \"x\" ] ; then GRUB_DEFAULT=0 ; fi\nif [ \"x${GRUB_DEFAULT}\" = \"xsaved\" ] ; then GRUB_DEFAULT='${saved_entry}' ; fi\nif [ \"x${GRUB_TIMEOUT}\" = \"x\" ] ; then GRUB_TIMEOUT=5 ; fi\nif [ \"x${GRUB_GFXMODE}\" = \"x\" ] ; then GRUB_GFXMODE=auto ; fi\n\nif [ \"x${GRUB_DEFAULT_BUTTON}\" = \"x\" ] ; then GRUB_DEFAULT_BUTTON=\"$GRUB_DEFAULT\" ; fi\nif [ \"x${GRUB_DEFAULT_BUTTON}\" = \"xsaved\" ] ; then GRUB_DEFAULT_BUTTON='${saved_entry}' ; fi\nif [ \"x${GRUB_TIMEOUT_BUTTON}\" = \"x\" ] ; then GRUB_TIMEOUT_BUTTON=\"$GRUB_TIMEOUT\" ; fi\n\ncat << EOF\nif [ -s \\$prefix/grubenv ]; then\n  load_env\nfi\nEOF\nif [ \"x$GRUB_BUTTON_CMOS_ADDRESS\" != \"x\" ]; then\n    cat <<EOF\nif cmostest $GRUB_BUTTON_CMOS_ADDRESS ; then\n   set default=\"${GRUB_DEFAULT_BUTTON}\"\nelif [ \"\\${next_entry}\" ] ; then\n   set default=\"\\${next_entry}\"\n   set next_entry=\n   save_env next_entry\n   set boot_once=true\nelse\n   set default=\"${GRUB_DEFAULT}\"\nfi\nEOF\nelse\n    cat <<EOF\nif [ \"\\${next_entry}\" ] ; then\n   set default=\"\\${next_entry}\"\n   set next_entry=\n   save_env next_entry\n   set boot_once=true\nelse\n   set default=\"${GRUB_DEFAULT}\"\nfi\nEOF\nfi\ncat <<EOF\n\nif [ x\"\\${feature_menuentry_id}\" = xy ]; then\n  menuentry_id_option=\"--id\"\nelse\n  menuentry_id_option=\"\"\nfi\n\nexport menuentry_id_option\n\nif [ \"\\${prev_saved_entry}\" ]; then\n  set saved_entry=\"\\${prev_saved_entry}\"\n  save_env saved_entry\n  set prev_saved_entry=\n  save_env prev_saved_entry\n  set boot_once=true\nfi\n\nfunction savedefault {\n  if [ -z \"\\${boot_once}\" ]; then\n    saved_entry=\"\\${chosen}\"\n    save_env saved_entry\n  fi\n}\n\nfunction load_video {\nEOF\nif [ -n \"${GRUB_VIDEO_BACKEND}\" ]; then\n    cat <<EOF\n  insmod ${GRUB_VIDEO_BACKEND}\nEOF\nelse\n# If all_video.mod isn't available load all modules available\n# with versions prior to introduction of all_video.mod\ncat <<EOF\n  if [ x\\$feature_all_video_module = xy ]; then\n    insmod all_video\n  else\n    insmod efi_gop\n    insmod efi_uga\n    insmod ieee1275_fb\n    insmod vbe\n    insmod vga\n    insmod video_bochs\n    insmod video_cirrus\n  fi\nEOF\nfi\ncat <<EOF\n}\n\nEOF\n\nif [ x$GRUB_COLOR_NORMAL != x ] && [ x$GRUB_COLOR_HIGHLIGHT != x ] ; then\n    cat << EOF\nset menu_color_normal=$GRUB_COLOR_NORMAL\nset menu_color_highlight=$GRUB_COLOR_HIGHLIGHT\n\nEOF\nfi\n\nserial=0;\ngfxterm=0;\nfor x in ${GRUB_TERMINAL_INPUT} ${GRUB_TERMINAL_OUTPUT}; do\n    if [ xserial = \"x$x\" ]; then\n\tserial=1;\n    fi\n    if [ xgfxterm = \"x$x\" ]; then\n\tgfxterm=1;\n    fi\ndone\n\nif [ \"x$serial\" = x1 ]; then\n    if [ \"x${GRUB_SERIAL_COMMAND}\" = \"x\" ] ; then\n\tgrub_warn \"$(gettext \"Requested serial terminal but GRUB_SERIAL_COMMAND is unspecified. Default parameters will be used.\")\"\n\tGRUB_SERIAL_COMMAND=serial\n    fi\n    echo \"${GRUB_SERIAL_COMMAND}\"\nfi\n\nif [ \"x$gfxterm\" = x1 ]; then\n    if [ -n \"$GRUB_FONT\" ] ; then\n       # Make the font accessible\n       prepare_grub_to_access_device `${grub_probe} --target=device \"${GRUB_FONT}\"`\n    cat << EOF\nif loadfont `make_system_path_relative_to_its_root \"${GRUB_FONT}\"` ; then\nEOF\n    else\n\tfor dir in \"${pkgdatadir}\" \"`echo '//boot/grub' | sed \"s,//*,/,g\"`\" /usr/share/grub ; do\n\t    for basename in unicode unifont ascii; do\n\t\tpath=\"${dir}/${basename}.pf2\"\n\t\tif is_path_readable_by_grub \"${path}\" > /dev/null ; then\n\t\t    font_path=\"${path}\"\n\t\telse\n\t\t    continue\n\t\tfi\n\t\tbreak 2\n\t    done\n\tdone\n\tif [ -n \"${font_path}\" ] ; then\n    cat << EOF\nif [ x\\$feature_default_font_path = xy ] ; then\n   font=unicode\nelse\nEOF\n                # Make the font accessible\n\t\tprepare_grub_to_access_device `${grub_probe} --target=device \"${font_path}\"`\n    cat << EOF\n    font=\"`make_system_path_relative_to_its_root \"${font_path}\"`\"\nfi\n\nif loadfont \\$font ; then\nEOF\n\t    else\n    cat << EOF\nif loadfont unicode ; then\nEOF\n\t    fi\n\tfi\n\n    cat << EOF\n  set gfxmode=${GRUB_GFXMODE}\n  load_video\n  insmod gfxterm\nEOF\n\n# Gettext variables and module\nif [ \"x${LANG}\" != \"xC\" ] &&  [ \"x${LANG}\" != \"x\" ]; then\n  cat << EOF\n  set locale_dir=\\$prefix/locale\n  set lang=${grub_lang}\n  insmod gettext\nEOF\nfi\n\ncat <<EOF\nfi\nEOF\nfi\n\ncase x${GRUB_TERMINAL_INPUT} in\n  x)\n    # Just use the native terminal\n  ;;\n  x*)\n    cat << EOF\nterminal_input ${GRUB_TERMINAL_INPUT}\nEOF\n  ;;\nesac\n\ncase x${GRUB_TERMINAL_OUTPUT} in\n  x)\n    # Just use the native terminal\n  ;;\n  x*)\n    cat << EOF\nterminal_output ${GRUB_TERMINAL_OUTPUT}\nEOF\n  ;;\nesac\n\nif [ \"x$gfxterm\" = x1 ]; then\n    if [ \"x$GRUB_THEME\" != x ] && [ -f \"$GRUB_THEME\" ] \\\n\t&& is_path_readable_by_grub \"$GRUB_THEME\"; then\n\tgettext_printf \"Found theme: %s\\n\" \"$GRUB_THEME\" >&2\n\n\tprepare_grub_to_access_device `${grub_probe} --target=device \"$GRUB_THEME\"`\n\tcat << EOF\ninsmod gfxmenu\nEOF\n\tthemedir=\"`dirname \"$GRUB_THEME\"`\"\n\tfor x in \"$themedir\"/*.pf2 \"$themedir\"/f/*.pf2; do\n\t    if [ -f \"$x\" ]; then\n\t\tcat << EOF\nloadfont (\\$root)`make_system_path_relative_to_its_root $x`\nEOF\n\t    fi\n\tdone\n\tif [ x\"`echo \"$themedir\"/*.jpg`\" != x\"$themedir/*.jpg\" ] || [ x\"`echo \"$themedir\"/*.jpeg`\" != x\"$themedir/*.jpeg\" ]; then\n\t    cat << EOF\ninsmod jpeg\nEOF\n\tfi\n\tif [ x\"`echo \"$themedir\"/*.png`\" != x\"$themedir/*.png\" ]; then\n\t    cat << EOF\ninsmod png\nEOF\n\tfi\n\tif [ x\"`echo \"$themedir\"/*.tga`\" != x\"$themedir/*.tga\" ]; then\n\t    cat << EOF\ninsmod tga\nEOF\n\tfi\n\t    \n\tcat << EOF\nset theme=(\\$root)`make_system_path_relative_to_its_root $GRUB_THEME`\nexport theme\nEOF\n    elif [ \"x$GRUB_BACKGROUND\" != x ] && [ -f \"$GRUB_BACKGROUND\" ] \\\n\t    && is_path_readable_by_grub \"$GRUB_BACKGROUND\"; then\n\tgettext_printf \"Found background: %s\\n\" \"$GRUB_BACKGROUND\" >&2\n\tcase \"$GRUB_BACKGROUND\" in \n\t    *.png)         reader=png ;;\n\t    *.tga)         reader=tga ;;\n\t    *.jpg|*.jpeg)  reader=jpeg ;;\n\t    *)             gettext \"Unsupported image format\" >&2; echo >&2; exit 1 ;;\n\tesac\n\tprepare_grub_to_access_device `${grub_probe} --target=device \"$GRUB_BACKGROUND\"`\n\tcat << EOF\ninsmod $reader\nbackground_image -m stretch `make_system_path_relative_to_its_root \"$GRUB_BACKGROUND\"`\nEOF\n    fi\nfi\n\nmake_timeout ()\n{\n    if [ \"x${3}\" != \"x\" ] ; then\n\ttimeout=\"${2}\"\n\tstyle=\"${3}\"\n    elif [ \"x${1}\" != \"x\" ] && [ \"x${1}\" != \"x0\" ] ; then\n\t# Handle the deprecated GRUB_HIDDEN_TIMEOUT scheme.\n\ttimeout=\"${1}\"\n\tif [ \"x${2}\" != \"x0\" ] ; then\n\t    grub_warn \"$(gettext \"Setting GRUB_TIMEOUT to a non-zero value when GRUB_HIDDEN_TIMEOUT is set is no longer supported.\")\"\n\tfi\n\tif [ \"x${GRUB_HIDDEN_TIMEOUT_QUIET}\" = \"xtrue\" ] ; then\n\t    style=\"hidden\"\n\t    verbose=\n\telse\n\t    style=\"countdown\"\n\t    verbose=\" --verbose\"\n\tfi\n    else\n\t# No hidden timeout, so treat as GRUB_TIMEOUT_STYLE=menu\n\ttimeout=\"${2}\"\n\tstyle=\"menu\"\n    fi\n    cat << EOF\nif [ x\\$feature_timeout_style = xy ] ; then\n  set timeout_style=${style}\n  set timeout=${timeout}\nEOF\n    if [ \"x${style}\" = \"xmenu\" ] ; then\n\tcat << EOF\n# Fallback normal timeout code in case the timeout_style feature is\n# unavailable.\nelse\n  set timeout=${timeout}\nEOF\n    else\n\tcat << EOF\n# Fallback hidden-timeout code in case the timeout_style feature is\n# unavailable.\nelif sleep${verbose} --interruptible ${timeout} ; then\n  set timeout=0\nEOF\n    fi\n    cat << EOF\nfi\nEOF\n}\n\nif [ \"x$GRUB_BUTTON_CMOS_ADDRESS\" != \"x\" ]; then\n    cat <<EOF\nif cmostest $GRUB_BUTTON_CMOS_ADDRESS ; then\nEOF\nmake_timeout \"${GRUB_HIDDEN_TIMEOUT_BUTTON}\" \"${GRUB_TIMEOUT_BUTTON}\" \"${GRUB_TIMEOUT_STYLE_BUTTON}\"\necho else\nmake_timeout \"${GRUB_HIDDEN_TIMEOUT}\" \"${GRUB_TIMEOUT}\" \"${GRUB_TIMEOUT_STYLE}\"\necho fi\nelse\nmake_timeout \"${GRUB_HIDDEN_TIMEOUT}\" \"${GRUB_TIMEOUT}\" \"${GRUB_TIMEOUT_STYLE}\"\nfi\n\nif [ \"x$GRUB_BUTTON_CMOS_ADDRESS\" != \"x\" ] && [ \"x$GRUB_BUTTON_CMOS_CLEAN\" = \"xyes\" ]; then\n    cat <<EOF\ncmosclean $GRUB_BUTTON_CMOS_ADDRESS\nEOF\nfi\n\n# Play an initial tune\nif [ \"x${GRUB_INIT_TUNE}\" != \"x\" ] ; then\n  echo \"play ${GRUB_INIT_TUNE}\"\nfi\n\nif [ \"x${GRUB_BADRAM}\" != \"x\" ] ; then\n  echo \"badram ${GRUB_BADRAM}\"\nfi\n",
					"file": "/etc/grub.d/51_header",
					"file_size": 8871,
					"file_write_time": 131306247980000000,
					"settings":
					{
						"buffer_size": 8871,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/etc/grub.d/00_header",
					"settings":
					{
						"buffer_size": 8950,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/etc/grub.d/52_grub-customizer_menu_color_helper",
					"settings":
					{
						"buffer_size": 270,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "#! /bin/sh\nset -e\n\n# grub-mkconfig helper script.\n# Copyright (C) 2006,2007,2008,2009  Free Software Foundation, Inc.\n#\n# GRUB is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# GRUB is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.\n\nprefix=\"/usr\"\nexec_prefix=\"/usr\"\ndatarootdir=\"/usr/share\"\n\nexport TEXTDOMAIN=grub\nexport TEXTDOMAINDIR=\"${datarootdir}/locale\"\n\n. \"$pkgdatadir/grub-mkconfig_lib\"\n\nif [ \"x${GRUB_DISABLE_OS_PROBER}\" = \"xtrue\" ]; then\n  exit 0\nfi\n\nif [ -z \"`which os-prober 2> /dev/null`\" ] || [ -z \"`which linux-boot-prober 2> /dev/null`\" ] ; then\n  # missing os-prober and/or linux-boot-prober\n  exit 0\nfi\n\nOSPROBED=\"`os-prober | tr ' ' '^' | paste -s -d ' '`\"\nif [ -z \"${OSPROBED}\" ] ; then\n  # empty os-prober output, nothing doing\n  exit 0\nfi\n\nosx_entry() {\n    if [ x$2 = x32 ]; then\n        # TRANSLATORS: it refers to kernel architecture (32-bit)\n\tbitstr=\"$(gettext \"(32-bit)\")\"\n    else\n        # TRANSLATORS: it refers to kernel architecture (64-bit)\n\tbitstr=\"$(gettext \"(64-bit)\")\"\n    fi\n    # TRANSLATORS: it refers on the OS residing on device %s\n    onstr=\"$(gettext_printf \"(on %s)\" \"${DEVICE}\")\"\n        cat << EOF\nmenuentry '$(echo \"${LONGNAME} $bitstr $onstr\" | grub_quote)' --class osx --class darwin --class os \\$menuentry_id_option 'osprober-xnu-$2-$(grub_get_device_id \"${DEVICE}\")'  {\nEOF\n\tsave_default_entry | grub_add_tab\n\tprepare_grub_to_access_device ${DEVICE} | grub_add_tab\n\tcat << EOF\n        load_video\n        set do_resume=0\n        if [ /var/vm/sleepimage -nt10 / ]; then\n           if xnu_resume /var/vm/sleepimage; then\n             set do_resume=1\n           fi\n        fi\n        if [ \\$do_resume = 0 ]; then\n           xnu_uuid ${OSXUUID} uuid\n           if [ -f /Extra/DSDT.aml ]; then\n              acpi -e /Extra/DSDT.aml\n           fi\n           if [ /kernelcache -nt /System/Library/Extensions ]; then\n              $1 /kernelcache boot-uuid=\\${uuid} rd=*uuid\n           elif [ -f /System/Library/Kernels/kernel ]; then\n              $1 /System/Library/Kernels/kernel boot-uuid=\\${uuid} rd=*uuid\n              xnu_kextdir /System/Library/Extensions\n           else\n              $1 /mach_kernel boot-uuid=\\${uuid} rd=*uuid\n              if [ /System/Library/Extensions.mkext -nt /System/Library/Extensions ]; then\n                xnu_mkext /System/Library/Extensions.mkext\n              else\n                xnu_kextdir /System/Library/Extensions\n              fi\n           fi\n           if [ -f /Extra/Extensions.mkext ]; then\n              xnu_mkext /Extra/Extensions.mkext\n           fi\n           if [ -d /Extra/Extensions ]; then\n              xnu_kextdir /Extra/Extensions\n           fi\n           if [ -f /Extra/devprop.bin ]; then\n              xnu_devprop_load /Extra/devprop.bin\n           fi\n           if [ -f /Extra/splash.jpg ]; then\n              insmod jpeg\n              xnu_splash /Extra/splash.jpg\n           fi\n           if [ -f /Extra/splash.png ]; then\n              insmod png\n              xnu_splash /Extra/splash.png\n           fi\n           if [ -f /Extra/splash.tga ]; then\n              insmod tga\n              xnu_splash /Extra/splash.tga\n           fi\n        fi\n}\nEOF\n}\n\nused_osprober_linux_ids=\n\nfor OS in ${OSPROBED} ; do\n  DEVICE=\"`echo ${OS} | cut -d ':' -f 1`\"\n  LONGNAME=\"`echo ${OS} | cut -d ':' -f 2 | tr '^' ' '`\"\n  LABEL=\"`echo ${OS} | cut -d ':' -f 3 | tr '^' ' '`\"\n  BOOT=\"`echo ${OS} | cut -d ':' -f 4`\"\n  if UUID=\"`${grub_probe} --target=fs_uuid --device ${DEVICE%@*}`\"; then\n    EXPUUID=\"$UUID\"\n\n    if [ x\"${DEVICE#*@}\" != x ] ; then\n      EXPUUID=\"${EXPUUID}@${DEVICE#*@}\"\n    fi\n\n    if [ \"x${GRUB_OS_PROBER_SKIP_LIST}\" != \"x\" ] && [ \"x`echo ${GRUB_OS_PROBER_SKIP_LIST} | grep -i -e '\\b'${EXPUUID}'\\b'`\" != \"x\" ] ; then\n      echo \"Skipped ${LONGNAME} on ${DEVICE} by user request.\" >&2\n      continue\n    fi\n  fi\n\n  BTRFS=\"`echo ${OS} | cut -d ':' -f 5`\"\n  if [ \"x$BTRFS\" = \"xbtrfs\" ]; then\n\tBTRFSuuid=\"`echo ${OS} | cut -d ':' -f 6`\"\n\tBTRFSsubvol=\"`echo ${OS} | cut -d ':' -f 7`\"\n  fi\n\n  if [ -z \"${LONGNAME}\" ] ; then\n    LONGNAME=\"${LABEL}\"\n  fi\n\n  # os-prober returns text string followed by optional counter\n  CLASS=\"--class $(echo \"${LABEL}\" | LC_ALL=C sed 's,[[:digit:]]*$,,' | cut -d' ' -f1 | tr 'A-Z' 'a-z' | LC_ALL=C sed 's,[^[:alnum:]_],_,g')\"\n\n  gettext_printf \"Found %s on %s\\n\" \"${LONGNAME}\" \"${DEVICE}\" >&2\n\n  case ${BOOT} in\n    chain)\n\n\t  onstr=\"$(gettext_printf \"(on %s)\" \"${DEVICE}\")\"\n      cat << EOF\nmenuentry '$(echo \"${LONGNAME} $onstr\" | grub_quote)' $CLASS --class os \\$menuentry_id_option 'osprober-chain-$(grub_get_device_id \"${DEVICE}\")' {\nEOF\n      save_default_entry | grub_add_tab\n      prepare_grub_to_access_device ${DEVICE} | grub_add_tab\n\n      if [ x\"`${grub_probe} --device ${DEVICE} --target=partmap`\" = xmsdos ]; then\n\t  cat << EOF\n\tparttool \\${root} hidden-\nEOF\n      fi\n\n      case ${LONGNAME} in\n\tWindows\\ Vista*|Windows\\ 7*|Windows\\ Server\\ 2008*)\n\t;;\n\t*)\n\t  cat << EOF\n\tdrivemap -s (hd0) \\${root}\nEOF\n\t;;\n      esac\n\n      cat <<EOF\n\tchainloader +1\n}\nEOF\n    ;;\n    efi)\n\n\tEFIPATH=${DEVICE#*@}\n\tDEVICE=${DEVICE%@*}\n\tonstr=\"$(gettext_printf \"(on %s)\" \"${DEVICE}\")\"\n      cat << EOF\nmenuentry '$(echo \"${LONGNAME} $onstr\" | grub_quote)' $CLASS --class os \\$menuentry_id_option 'osprober-efi-$(grub_get_device_id \"${DEVICE}\")' {\nEOF\n      save_default_entry | sed -e \"s/^/\\t/\"\n      prepare_grub_to_access_device ${DEVICE} | sed -e \"s/^/\\t/\"\n\n      cat <<EOF\n\tchainloader ${EFIPATH}\n}\nEOF\n    ;;\n    linux)\n      if [ \"x$BTRFS\" = \"xbtrfs\" ]; then\n         LINUXPROBED=\"`linux-boot-prober btrfs ${BTRFSuuid} ${BTRFSsubvol}  2> /dev/null | tr ' ' '^' | paste -s -d ' '`\"\n      else\n         LINUXPROBED=\"`linux-boot-prober ${DEVICE} 2> /dev/null | tr ' ' '^' | paste -s -d ' '`\"\n      fi\n      prepare_boot_cache=\n      boot_device_id=\n      is_top_level=true\n      title_correction_code=\n      OS=\"${LONGNAME}\"\n\n      for LINUX in ${LINUXPROBED} ; do\n        LROOT=\"`echo ${LINUX} | cut -d ':' -f 1`\"\n        LBOOT=\"`echo ${LINUX} | cut -d ':' -f 2`\"\n        LLABEL=\"`echo ${LINUX} | cut -d ':' -f 3 | tr '^' ' '`\"\n        LKERNEL=\"`echo ${LINUX} | cut -d ':' -f 4`\"\n        LINITRD=\"`echo ${LINUX} | cut -d ':' -f 5`\"\n        LPARAMS=\"`echo ${LINUX} | cut -d ':' -f 6- | tr '^' ' '`\"\n\n        if [ -z \"${LLABEL}\" ] ; then\n          LLABEL=\"${LONGNAME}\"\n        fi\n\n\tif [ \"${LROOT}\" != \"${LBOOT}\" ]; then\n\t  LKERNEL=\"${LKERNEL#/boot}\"\n\t  LINITRD=\"${LINITRD#/boot}\"\n\tfi\n\n\tonstr=\"$(gettext_printf \"(on %s)\" \"${DEVICE}\")\"\n\trecovery_params=\"$(echo \"${LPARAMS}\" | grep single)\" || true\n\tcounter=1\n\twhile echo \"$used_osprober_linux_ids\" | grep 'osprober-gnulinux-$LKERNEL-${recovery_params}-$counter-$boot_device_id' > /dev/null; do\n\t    counter=$((counter+1));\n\tdone\n\tif [ -z \"$boot_device_id\" ]; then\n\t    boot_device_id=\"$(grub_get_device_id \"${DEVICE}\")\"\n\tfi\n\tused_osprober_linux_ids=\"$used_osprober_linux_ids 'osprober-gnulinux-$LKERNEL-${recovery_params}-$counter-$boot_device_id'\"\n\n\tif [ -z \"${prepare_boot_cache}\" ]; then\n\t  prepare_boot_cache=\"$(prepare_grub_to_access_device ${LBOOT} | grub_add_tab)\"\n\tfi\n\n\tif [ \"x$is_top_level\" = xtrue ] && [ \"x${GRUB_DISABLE_SUBMENU}\" != xy ]; then\n            cat << EOF\nmenuentry '$(echo \"$OS $onstr\" | grub_quote)' $CLASS --class gnu-linux --class gnu --class os \\$menuentry_id_option 'osprober-gnulinux-simple-$boot_device_id' {\nEOF\n\t    save_default_entry | grub_add_tab\n\t    printf '%s\\n' \"${prepare_boot_cache}\"\n\t    cat <<  EOF\n\tlinux ${LKERNEL} ${LPARAMS}\nEOF\n            if [ -n \"${LINITRD}\" ] ; then\n          cat << EOF\n\tinitrd ${LINITRD}\nEOF\n            fi\n        cat << EOF\n}\nEOF\n\t    echo \"submenu '$(gettext_printf \"Advanced options for %s\" \"${OS} $onstr\" | grub_quote)' \\$menuentry_id_option 'osprober-gnulinux-advanced-$boot_device_id' {\"\n\t    is_top_level=false\n\tfi\n\ttitle=\"${LLABEL} $onstr\"\n        cat << EOF\n\tmenuentry '$(echo \"$title\" | grub_quote)' --class gnu-linux --class gnu --class os \\$menuentry_id_option 'osprober-gnulinux-$LKERNEL-${recovery_params}-$boot_device_id' {\nEOF\n\tsave_default_entry | sed -e \"s/^/$grub_tab$grub_tab/\"\n\tprintf '%s\\n' \"${prepare_boot_cache}\" | grub_add_tab\n\tcat <<  EOF\n\t\tlinux ${LKERNEL} ${LPARAMS}\nEOF\n        if [ -n \"${LINITRD}\" ] ; then\n            cat << EOF\n\t\tinitrd ${LINITRD}\nEOF\n        fi\n        cat << EOF\n\t}\nEOF\n\tif [ x\"$title\" = x\"$GRUB_ACTUAL_DEFAULT\" ] || [ x\"Previous Linux versions>$title\" = x\"$GRUB_ACTUAL_DEFAULT\" ]; then\n\t    replacement_title=\"$(echo \"Advanced options for ${OS} $onstr\" | sed 's,>,>>,g')>$(echo \"$title\" | sed 's,>,>>,g')\"\n\t    quoted=\"$(echo \"$GRUB_ACTUAL_DEFAULT\" | grub_quote)\"\n\t    title_correction_code=\"${title_correction_code}if [ \\\"x\\$default\\\" = '$quoted' ]; then default='$(echo \"$replacement_title\" | grub_quote)'; fi;\"\n\t    grub_warn \"$(gettext_printf \"Please don't use old title \\`%s' for GRUB_DEFAULT, use \\`%s' (for versions before 2.00) or \\`%s' (for 2.00 or later)\" \"$GRUB_ACTUAL_DEFAULT\" \"$replacement_title\" \"gnulinux-advanced-$boot_device_id>gnulinux-$version-$type-$boot_device_id\")\"\n\tfi\n      done\n      if [ x\"$is_top_level\" != xtrue ]; then\n\t  echo '}'\n      fi\n      echo \"$title_correction_code\"\n    ;;\n    macosx)\n      if [ \"${UUID}\" ]; then\n\tOSXUUID=\"${UUID}\"\n\tosx_entry xnu_kernel 32\n\tosx_entry xnu_kernel64 64\n      fi\n    ;;\n    hurd)\n      onstr=\"$(gettext_printf \"(on %s)\" \"${DEVICE}\")\"\n      cat << EOF\nmenuentry '$(echo \"${LONGNAME} $onstr\" | grub_quote)' --class hurd --class gnu --class os \\$menuentry_id_option 'osprober-gnuhurd-/boot/gnumach.gz-false-$(grub_get_device_id \"${DEVICE}\")' {\nEOF\n      save_default_entry | grub_add_tab\n      prepare_grub_to_access_device ${DEVICE} | grub_add_tab\n      grub_device=\"`${grub_probe} --device ${DEVICE} --target=drive`\"\n      mach_device=\"`echo \"${grub_device}\" | sed -e 's/(\\(hd.*\\),msdos\\(.*\\))/\\1s\\2/'`\"\n      grub_fs=\"`${grub_probe} --device ${DEVICE} --target=fs`\"\n      case \"${grub_fs}\" in\n\t*fs)\thurd_fs=\"${grub_fs}\" ;;\n\t*)\thurd_fs=\"${grub_fs}fs\" ;;\n      esac\n      cat << EOF\n\tmultiboot /boot/gnumach.gz root=device:${mach_device}\n\tmodule /hurd/${hurd_fs}.static ${hurd_fs} --readonly \\\\\n\t\t\t--multiboot-command-line='\\${kernel-command-line}' \\\\\n\t\t\t--host-priv-port='\\${host-port}' \\\\\n\t\t\t--device-master-port='\\${device-port}' \\\\\n\t\t\t--exec-server-task='\\${exec-task}' -T typed '\\${root}' \\\\\n\t\t\t'\\$(task-create)' '\\$(task-resume)'\n\tmodule /lib/ld.so.1 exec /hurd/exec '\\$(exec-task=task-create)'\n}\nEOF\n    ;;\n    minix)\n\t  cat << EOF\nmenuentry \"${LONGNAME} (on ${DEVICE}, Multiboot)\" {\nEOF\n         save_default_entry | sed -e \"s/^/\\t/\"\n         prepare_grub_to_access_device ${DEVICE} | sed -e \"s/^/\\t/\"\n\t cat << EOF\n\tmultiboot /boot/image_latest\n}\nEOF\n    ;;\n    *)\n      # TRANSLATORS: %s is replaced by OS name.\n      gettext_printf \"%s is not yet supported by grub-mkconfig.\\n\" \"  ${LONGNAME}\" >&2\n    ;;\n  esac\ndone\n",
					"file": "/etc/grub.d/53_os-prober",
					"file_size": 11301,
					"file_write_time": 131306247980000000,
					"settings":
					{
						"buffer_size": 11301,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/etc/grub.d/30_os-prober",
					"settings":
					{
						"buffer_size": 11301,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/etc/grub.d/55_linux_proxy",
					"settings":
					{
						"buffer_size": 594,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "#!/bin/sh\nexec tail -n +3 $0\n# This file provides an easy way to add custom menu entries.  Simply type the\n# menu entries you want to add after this comment.  Be careful not to change\n# the 'exec tail' line above.\n}\nmenuentry \"Windows\"{\n\tif [ \"${grub_platform}\" == \"efi\" ]; then\n\t\tmenuentry \"Microsoft Windows Vista/7/8/8.1 UEFI-GPT\" {\n\t\t\tinsmod part_gpt\n\t\t\tinsmod fat\n\t\t\tinsmod search_fs_uuid\n\t\t\tinsmod chain\n\t\t\tsearch --fs-uuid --set=root --hint-bios=hd1,gpt2 --hint-efi=hd1,gpt2 --hint-baremetal=ahci1,gpt2 3455-A530\n\t\t\tchainloader /EFI/Microsoft/Boot/bootmgfw.efi\n\t\t}\n\tfi\n}\n",
					"file": "/etc/grub.d/proxifiedScripts/custom",
					"file_size": 578,
					"file_write_time": 131336081068446950,
					"settings":
					{
						"buffer_size": 578,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 192.0,
				"last_filter": "hex",
				"selected_items":
				[
					[
						"hex",
						"HexViewer: Toggle Hex View"
					],
					[
						"install",
						"Package Control: Install Package"
					]
				],
				"width": 485.0
			},
			"console":
			{
				"height": 126.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/boot/grub/grub.cfg.new",
				"/home/root/.Xdefaults",
				"/home/root/.Xresources_Bak",
				"/root/.Xresources",
				"/usr/share/applications/kitty.desktop",
				"/root/.zshrc",
				"/root/.config/openbox/rc.xml",
				"/root/.zsh/aliasesUNIX",
				"/etc/lightdm/users.conf",
				"/etc/lightdm/Xsession",
				"/etc/lightdm/lightdm-mini-greeter.conf",
				"/etc/lightdm/lightdm.conf",
				"/etc/xdg/openbox/autostart",
				"/etc/X11/xinit/xinitrc",
				"/etc/default/passwd",
				"/usr/share/xsessions/openbox.desktop",
				"/root/.config/albert.conf",
				"/root/.config/albert.conf.jd5829",
				"/usr/share/xsessions/openbox-kde.desktop",
				"/usr/share/xsessions/i3.desktop",
				"/root/dotfiles/.config/openbox/autostart",
				"/root/.config/openbox/autostart",
				"/root/dotfiles/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
				"/root/dotfiles/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/root/17499-009b8000-01536000.dump",
				"/root/17499-00659000-0065a000.dump",
				"/root/.config/lxsession/LXDE/desktop.conf",
				"/root/.bashrc",
				"/root/.profile",
				"/root/.termc",
				"/root/android/system/.repo/local_manifests/roomservice.xml",
				"/root/Desktop/tesata",
				"/root/.onedrive/ignore_v2.ini",
				"/root/.config/yabar/yabar.conf",
				"/root/dotfiles/install",
				"/root/dotfiles/i.sh",
				"/root/.config/ob-autostart/config",
				"/root/.config/termite.conf",
				"/root/.zsh-update",
				"/root/fixlinks.sh",
				"/root/.wxcam",
				"/root/.Xdefaults",
				"/etc/grub.d/README",
				"/etc/default/grub",
				"/etc/grub.d/31_hold_shift",
				"/home/hey/.cache/pacaur/thunar-git/src/thunar-git/thunar/thunar-window.c",
				"/home/hey/.cache/pacaur/ncurses5-compat-libs/PKGBUILD",
				"/root/android/system/.repo/manifest.xml",
				"/root/.Xauthority",
				"/root/.config/openbox/environment",
				"/root/.config/termite/config",
				"/root/dotfiles/i",
				"/root/.install",
				"/root/..zshrc",
				"/esp/grub/grub.cfg",
				"/root/Desktop/steam.desktop",
				"/etc/ld.so.conf",
				"/home/hey/.cache/pacaur/android-sdk/PKGBUILD"
			],
			"find":
			{
				"height": 23.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"overw",
					"overwr",
					"extglob",
					"echo",
					"root",
					"pre",
					"prebuilts",
					"platform/",
					"darwin",
					"darrwin",
					"linux"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"printf",
					"platform/pre",
					"",
					"darwin",
					"darrwin"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 9,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/usr/share/applications/termite.desktop",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 171,
								"regions":
								{
								},
								"selection":
								[
									[
										94,
										71
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 23,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/root/.config/sxhkd/sxhkdrc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 57,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 22,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/root/.Xdefaults",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1331,
								"regions":
								{
								},
								"selection":
								[
									[
										1331,
										1331
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 945.0,
								"zoom_level": 1.0
							},
							"stack_index": 17,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/root/.themes/TissueBox-Wolf/openbox-3/themerc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2005,
								"regions":
								{
								},
								"selection":
								[
									[
										283,
										283
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 21,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/root/.vnc/xstartup.turbovnc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4429,
								"regions":
								{
								},
								"selection":
								[
									[
										34,
										34
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 18,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/root/.config/yabar/yabar.conf",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2632,
								"regions":
								{
								},
								"selection":
								[
									[
										36,
										36
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 20,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "/root/.config/openbox/autostart",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 659,
								"regions":
								{
								},
								"selection":
								[
									[
										659,
										659
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 19,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "/root/.xsession-errors",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 35314,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 16,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "/etc/grub.d/README",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 483,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 9,
							"file": "/etc/default/grub",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1690,
								"regions":
								{
								},
								"selection":
								[
									[
										303,
										303
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 47.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 10,
							"file": "/etc/grub.d/31_holdshift",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1557,
								"regions":
								{
								},
								"selection":
								[
									[
										617,
										617
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 11,
							"file": "/boot/grub/themes/arch-silence/theme.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1037,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 12,
							"file": "/etc/grub.d/31_hold_shift",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1317,
								"regions":
								{
								},
								"selection":
								[
									[
										1317,
										1317
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 13,
							"file": "/boot/grub/grub.cfg",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 13321,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 14,
							"file": "/etc/grub.d/20_windows",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 576,
								"regions":
								{
								},
								"selection":
								[
									[
										213,
										213
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 15,
							"file": "/etc/grub.d/40_custom",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 214,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 15,
							"type": "text"
						},
						{
							"buffer": 16,
							"file": "/etc/grub.d/41_custom",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 216,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 14,
							"type": "text"
						},
						{
							"buffer": 17,
							"file": "/etc/grub.d/51_header",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 8871,
								"regions":
								{
								},
								"selection":
								[
									[
										8871,
										8871
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 3637.0,
								"zoom_level": 1.0
							},
							"stack_index": 13,
							"type": "text"
						},
						{
							"buffer": 18,
							"file": "/etc/grub.d/00_header",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 8950,
								"regions":
								{
								},
								"selection":
								[
									[
										8950,
										8950
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 4551.0,
								"zoom_level": 1.0
							},
							"stack_index": 12,
							"type": "text"
						},
						{
							"buffer": 19,
							"file": "/etc/grub.d/52_grub-customizer_menu_color_helper",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 270,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 11,
							"type": "text"
						},
						{
							"buffer": 20,
							"file": "/etc/grub.d/53_os-prober",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 11301,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 10,
							"type": "text"
						},
						{
							"buffer": 21,
							"file": "/etc/grub.d/30_os-prober",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 11301,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 9,
							"type": "text"
						},
						{
							"buffer": 22,
							"file": "/etc/grub.d/55_linux_proxy",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 594,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 23,
							"file": "/etc/grub.d/proxifiedScripts/custom",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 578,
								"regions":
								{
								},
								"selection":
								[
									[
										213,
										213
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 23.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"output.hex_viewer_inspector":
			{
				"height": 100.0
			},
			"pinned_build_system": "",
			"position": "0,0,0,0,0,208,20,979,1041,3520,1200",
			"project": "",
			"replace":
			{
				"height": 42.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": false,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 4,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
